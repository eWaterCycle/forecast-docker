[globalOptions]

# Set the input directory map in an absolute path. 
# - The input forcing and parameter directories will be relative to this.
inputDir = {{ hydroworld_location }}

# Map of clone (must be provided in PCRaster maps)
# - Spatial resolution and coverage are based on this map:
cloneMap = others/Global/Global_CloneMap_30min.map 

# The area/landmask of interest:
landmask = None
# If None, area/landmask is limited for cells with ldd value. 

# Set the output directory 
outputDir = {{ outputdir }}

# netcdf attributes for output files:
institution = Department of Physical Geography, Utrecht University
title       = PCR-GLOBWB output
description = test version (by Niels Drost) 

startTime = {{ starttime }}
endTime   = {{ endtime }}
# Format: YYYY-MM-DD
# The model runs on the daily time step.

# spinning up options
maxSpinUpsInYears = 0
minConvForTotlSto = 0.5
minConvForSoilSto = 0.5
minConvForGwatSto = 0.5
minConvForChanSto = 0.5

[meteoOptions]

# Set the forcing temperature and precipitation files (relative to inputDir)
precipitationNC = {{ precipitationfile }}
temperatureNC   = {{ temperaturefile }}

# Method to calculate referencePotETP (reference potential evaporation+transpiration)
referenceETPotMethod = Hamon
# options are "Hamon" and "Input" ; If "Input", the netcdf input file must be given:
refETPotFileNC  = forcing/CRU-TS3.21/merged_1958_to_2010/CRU-TS3.21_ERA-40_ERA-Interim_daily_referencePotET_1958_to_2010.nc

[landSurfaceOptions]
debugWaterBalance = True

numberOfUpperSoilLayers = 3

topographyNC      = PCRGLOBWB20/input30min/landSurface/topo/topoProperties.nc
soilPropertiesNC  = PCRGLOBWB20/input30min/landSurface/soil/soilProperties.nc

includeIrrigation = False
# if True, there are four land cover types defined: forest,grassland,irrPaddy,irrNonPaddy
# if False, two (natural) land cover types defined: forest,grassland

# netcdf time series for historical expansion of irrigation areas (unit: hectares). 
# Note: The resolution of this map must be consisten with the resolution of cellArea. 
historicalIrrigationArea = None
#historicalIrrigationArea = PCRGLOBWB20/input30min/landSurface/waterDemand/irrigated_areas/irrigationArea30ArcMin.nc

includeDomesticWaterDemand = False
includeIndustryWaterDemand = False

domesticWaterDemandFile = PCRGLOBWB20/input30min/landSurface/waterDemand/domesticWaterDemand30ArcMin.nc
industryWaterDemandFile = PCRGLOBWB20/input30min/landSurface/waterDemand/industryWaterDemand30ArcMin.nc

limitAbstraction = False

# zone IDs (scale) at which ground- surface-water allocation is performed  
#~ allocationSegmentsForGroundSurfaceWater = None
allocationSegmentsForGroundSurfaceWater = others/irrigationZones/one_arc_degree/uniqueIds60min.nom.map

[forestOptions]
name = forest
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05

# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002

landCoverMapsNC  = PCRGLOBWB20/input30min/landCover/forest/forestProperties.nc
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

cropCoefficientNC = PCRGLOBWB20/input30min/landCover/forest/Global_CropCoefficientKc-Forest_30min.nc
interceptCapNC    = PCRGLOBWB20/input30min/landCover/forest/interceptCapInputForest366days.nc
coverFractionNC   = PCRGLOBWB20/input30min/landCover/forest/coverFractionInputForest366days.nc

# initial conditions:
interceptStorIni = {{ initial_conditions_dir }}/interceptStor_forest.map
snowCoverSWEIni  = {{ initial_conditions_dir }}/snowCoverSWE_forest.map
snowFreeWaterIni = {{ initial_conditions_dir }}/snowFreeWater_forest.map
topWaterLayerIni = {{ initial_conditions_dir }}/topWaterLayer_forest.map
interflowIni     = {{ initial_conditions_dir }}/interceptStor_forest.map
storUpp000005Ini  = {{ initial_conditions_dir }}/storUpp000005_forest.map
storUpp005030Ini  = {{ initial_conditions_dir }}/storUpp005030_forest.map
storLow030150Ini  = {{ initial_conditions_dir }}/storLow030150_forest.map

[grasslandOptions]
name = grassland
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05

# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002

landCoverMapsNC  = PCRGLOBWB20/input30min/landCover/grassland/grasslandProperties.nc
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

cropCoefficientNC = PCRGLOBWB20/input30min/landCover/grassland/Global_CropCoefficientKc-Grassland_30min.nc
interceptCapNC    = PCRGLOBWB20/input30min/landCover/grassland/interceptCapInputGrassland366days.nc
coverFractionNC   = PCRGLOBWB20/input30min/landCover/grassland/coverFractionInputGrassland366days.nc

# initial conditions:
interceptStorIni = {{ initial_conditions_dir }}/interceptStor_grassland.map
snowCoverSWEIni  = {{ initial_conditions_dir }}/snowCoverSWE_grassland.map
snowFreeWaterIni = {{ initial_conditions_dir }}/snowFreeWater_grassland.map
topWaterLayerIni = {{ initial_conditions_dir }}/topWaterLayer_grassland.map
interflowIni     = {{ initial_conditions_dir }}/interflow_grassland.map
storUpp000005Ini  = {{ initial_conditions_dir }}/storUpp000005_grassland.map
storUpp005030Ini  = {{ initial_conditions_dir }}/storUpp005030_grassland.map
storLow030150Ini  = {{ initial_conditions_dir }}/storLow030150_grassland.map

[irrPaddyOptions]
name = irrPaddy
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05
#
landCoverMapsNC  = PCRGLOBWB20/input30min/landCover/irrPaddy/paddyProperties.nc
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.
#
# other paramater values
minTopWaterLayer = 0.05
minCropKC        = 0.2
minInterceptCap  = 0.0002
cropDeplFactor   = 0.2

cropCoefficientNC = PCRGLOBWB20/input30min/landCover/irrPaddy/Global_CropCoefficientKc-IrrPaddy_30min.nc

# initial conditions:
interceptStorIni = {{ initial_conditions_dir }}/interceptStor_irrPaddy.map
snowCoverSWEIni  = {{ initial_conditions_dir }}/snowCoverSWE_irrPaddy.map
snowFreeWaterIni = {{ initial_conditions_dir }}/snowFreeWater_irrPaddy.map
topWaterLayerIni = {{ initial_conditions_dir }}/topWaterLayer_irrPaddy.map
storUppIni       = {{ initial_conditions_dir }}/storUpp_irrPaddy.map
storLowIni       = {{ initial_conditions_dir }}/storLow_irrPaddy.map
interflowIni     = {{ initial_conditions_dir }}/interflow_irrPaddy.map

[irrNonPaddyOptions]
name = irrNonPaddy
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05
#
landCoverMapsNC  = PCRGLOBWB20/input30min/landCover/irrNonPaddy/nonPaddyProperties.nc
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.
#
# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002
cropDeplFactor   = 0.5

cropCoefficientNC = PCRGLOBWB20/input30min/landCover/irrNonPaddy/Global_CropCoefficientKc-IrrNonPaddy_30min.nc

# initial conditions:
interceptStorIni = {{ initial_conditions_dir }}/interceptStor_irrNonPaddy.map
snowCoverSWEIni  = {{ initial_conditions_dir }}/snowCoverSWE_irrNonPaddy.map
snowFreeWaterIni = {{ initial_conditions_dir }}/snowFreeWater_irrNonPaddy.map
topWaterLayerIni = {{ initial_conditions_dir }}/topWaterLayer_irrNonPaddy.map
storUppIni       = {{ initial_conditions_dir }}/storUpp_irrNonPaddy.map
storLowIni       = {{ initial_conditions_dir }}/storLow_irrNonPaddy.map
interflowIni     = {{ initial_conditions_dir }}/interflow_irrNonPaddy.map

[groundwaterOptions]
debugWaterBalance = True

groundwaterPropertiesNC = PCRGLOBWB20/input30min/groundwater/groundwaterProperties.nc

# minimum value for groundwater recession coefficient (day-1)
minRecessionCoeff = 2.5e-4

# initial condition:
storGroundwaterIni = {{ initial_conditions_dir }}/storGroundwater_.map
storGroundwaterFossilIni = {{ initial_conditions_dir }}/storGroundwaterFossil_.map
avgTotalGroundwaterAbstractionIni = {{ initial_conditions_dir }}/avgTotalGroundwaterAbstraction_.map

limitFossilGroundWaterAbstraction = False
minimumTotalGroundwaterThickness       = 100.
estimateOfTotalGroundwaterThickness    = 100.
estimateOfRenewableGroundwaterCapacity = 0.0


[routingOptions]
dynamicFloodPlain = False

debugWaterBalance = True

lddMap      = PCRGLOBWB20/input30min/routing/lddsound_30min.map
cellAreaMap = PCRGLOBWB20/input30min/routing/cellarea30min.map
gradient    = PCRGLOBWB20/input30min/routing/Global_ChannelGradient-RVB_30min.map

# manning coefficient
manningsN   = 0.04

# constant channel width (optional)
constantChannelWidth = None

# minimum channel width (optional)
minimumChannelWidth  = None

#routingMethod = kinematicWave
# Options are kinematicWave, simplifiedKinematicWave and accuTravelTime
routingMethod = accuTravelTime

# option for maximum length of a sub time step in seconds (optional and only used if kinematicWave is used)
# - Note that too long sub time step may create water balance errors.
# - Default values: 3600 seconds for 30 arcmin ; 720 seconds for 5 arcmin
maxiumLengthOfSubTimeStep = 3600.
#~ maxiumLengthOfSubTimeStep = 720.

# lake and reservoir parameters
waterBodyInputNC = PCRGLOBWB20/input30min/routing/reservoirs/fromRensJune2013/reservoirparameterization/waterBodies30min.nc
onlyNaturalWaterBodies = False

# composite crop factors for WaterBodies: 
cropCoefficientWaterNC = PCRGLOBWB20/input30min/routing/cropCoefficientForOpenWater.nc
minCropWaterKC         = 0.20

# number of days (timesteps) that have been performed for spinning up initial conditions in the routing module (i.e. channelStorageIni, avgDischargeLongIni, avgDischargeShortIni, etc.)
timestepsToAvgDischargeIni     = {{ initial_conditions_dir }}/timestepsToAvgDischarge_.map
# Note that: 
# - maximum number of days (timesteps) to calculate long term average flow values (default: 5 years = 5 * 365 days = 1825)
# - maximum number of days (timesteps) to calculate short term average values (default: 1 month = 1 * 30 days = 30)

# initial conditions:
#waterBodyStorageIni            = others/initial_conditions/ref_run_30min_cru_era40-eraInt_05_aug_2014/states/waterBodyStorage_1960-12-31.map
waterBodyStorageIni            = {{ initial_conditions_dir }}/waterBodyStorage_.map
channelStorageIni              = {{ initial_conditions_dir }}/channelStorage_.map
readAvlChannelStorageIni       = {{ initial_conditions_dir }}/readAvlChannelStorage_.map
avgDischargeLongIni            = {{ initial_conditions_dir }}/avgDischargeLong_.map
m2tDischargeLongIni            = {{ initial_conditions_dir }}/m2tDischargeLong_.map
avgBaseflowLongIni             = {{ initial_conditions_dir }}/avgBaseflowLong_.map
riverbedExchangeIni            = {{ initial_conditions_dir }}/riverbedExchange_.map
avgLakeReservoirInflowShortIni = {{ initial_conditions_dir }}/avgLakeReservoirInflowShort_.map
avgLakeReservoirOutflowLongIni = {{ initial_conditions_dir }}/avgLakeReservoirOutflowLong_.map
#
# initial condition of sub-time step discharge (needed for estimating number of time steps in kinematic wave methods)
subDischargeIni                = None
#
# other initial conditions (optional):
avgDischargeShortIni           = {{ initial_conditions_dir }}/avgDischargeShort_.map

[reportingOptions]
# output files that will be written in the disk in netcdf files:
outDailyTotNC = discharge
outMonthTotNC = None
outMonthAvgNC = None
outMonthEndNC = None
outAnnuaTotNC = None
outAnnuaAvgNC = None
outAnnuaEndNC = None
