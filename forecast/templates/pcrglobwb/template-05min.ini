[globalOptions]

# Set the input directory map in an absolute path. 
# - The input forcing and parameter directories will be relative to this.
inputDir = {{ hydroworld_location }}

# Map of clone (must be provided in PCRaster maps)
# - Spatial resolution and coverage are based on this map:
cloneMap = PCRGLOBWB20/input05min/global/Global_CloneMap_05min.map

# The area/landmask of interest:
landmask = None
# If None, area/landmask is limited for cells with ldd value. 

# Set the output directory in an absolute path.
outputDir = {{ outputdir }}

# netcdf attributes for output files:
institution = Department of Physical Geography, Utrecht University
title       = PCR-GLOBWB output
description = test version (by Edwin H. Sutanudjaja) 

startTime = {{ starttime }}
endTime   = {{ endtime }}
# Format: YYYY-MM-DD ; The current model runs on the daily time step.

# spinning up options:
maxSpinUpsInYears = 0
minConvForSoilSto = 1.0
minConvForGwatSto = 1.0
minConvForChanSto = 0.5
minConvForTotlSto = 1.0

[meteoOptions]

#forcing files
precipitationNC = {{ precipitationfile }}
temperatureNC = {{ temperaturefile }}

# Method to calculate referencePotETP (reference potential evaporation+transpiration)
referenceETPotMethod = Hamon
# options are "Hamon" and "Input" ; If "Input", the netcdf input file must be given:
refETPotFileNC  = None


[landSurfaceOptions]
debugWaterBalance = True

numberOfUpperSoilLayers = 3

topographyNC      = PCRGLOBWB20/input05min/landSurface/topo/topoProperties.nc
soilPropertiesNC  = PCRGLOBWB20/input05min/landSurface/soil/soilProperties.nc

includeIrrigation = False

# a pcraster map/value defining irrigation efficiency (dimensionless) - optional
irrigationEfficiency = None

# netcdf time series for historical expansion of irrigation areas (unit: hectares). 
# Note: The resolution of this map must be consisten with the resolution of cellArea. 
historicalIrrigationArea = PCRGLOBWB20/input05min/landSurface/waterDemand/irrigated_areas/irrigationArea.nc

includeDomesticWaterDemand  = False
includeIndustryWaterDemand  = False
includeLivestockWaterDemand = False

# domestic and industrial water demand data (unit must be in m.day-1)
#domesticWaterDemandFile  = PCRGLOBWB20/input05min/landSurface/waterDemand/domesticWaterDemand.nc
domesticWaterDemandFile = None
industryWaterDemandFile  = None
livestockWaterDemandFile = None

# desalination water supply (maximum/potential/capacity)
desalinationWater = None

# zone IDs (scale) at which allocations of groundwater and surface water (as well as desalinated water) are performed  
allocationSegmentsForGroundSurfaceWater = others/irrigationZones/one_arc_degree/uniqueIds60min.nom.map
#allocationSegmentsForGroundSurfaceWater = None

# predefined surface water - groundwater partitioning (based on Siebert, 2010/2013: Global Map of Irrigation Areas version 5):
#swAbstractionFractionData        = None
#swAbstractionFractionDataQuality = None


[forestOptions]

name = forest
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05

# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002

#~ landCoverMapsNC = PCRGLOBWB20/input5min/landCover/forest/forestProperties5ArcMin.nc
landCoverMapsNC  = None
# If NC file is not provided, we have to provide the following pcraster maps:
fracVegCover     = PCRGLOBWB20/input05min/landCover/forest/vegf_tall.map
minSoilDepthFrac = PCRGLOBWB20/input05min/landCover/forest/minf_tall_permafrost.map
maxSoilDepthFrac = PCRGLOBWB20/input05min/landCover/forest/maxf_tall.map
rootFraction1    = PCRGLOBWB20/input05min/landCover/forest/rfrac1_tall.map
rootFraction2    = PCRGLOBWB20/input05min/landCover/forest/rfrac2_tall.map	
maxRootDepth     = PCRGLOBWB20/input05min/landCover/forest/maxrootdepth_tall.map	

# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

cropCoefficientNC = PCRGLOBWB20/input05min/landCover/forest/cropCoefficientForest.nc
interceptCapNC    = PCRGLOBWB20/input05min/landCover/forest/interceptCapInputForest.nc
coverFractionNC   = PCRGLOBWB20/input05min/landCover/forest/coverFractionInputForest.nc

# initial conditions:
interceptStorIni = {{ initial_conditions_dir }}/interceptStor_forest.map
snowCoverSWEIni  = {{ initial_conditions_dir }}/snowCoverSWE_forest.map
snowFreeWaterIni = {{ initial_conditions_dir }}/snowFreeWater_forest.map
topWaterLayerIni = {{ initial_conditions_dir }}/topWaterLayer_forest.map
storUpp000005Ini = {{ initial_conditions_dir }}/storUpp000005_forest.map
storUpp005030Ini = {{ initial_conditions_dir }}/storUpp005030_forest.map
storLow030150Ini = {{ initial_conditions_dir }}/storLow030150_forest.map
interflowIni     = {{ initial_conditions_dir }}/interflow_forest.map

[grasslandOptions]

name = grassland
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05

# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002

#~ landCoverMapsNC = PCRGLOBWB20/input5min/landCover/grassland/grasslandProperties5ArcMin.nc
landCoverMapsNC  = None
# If NC file is not provided, we have to provide the following values:
fracVegCover     = PCRGLOBWB20/input05min/landCover/grassland/vegf_short.map
minSoilDepthFrac = PCRGLOBWB20/input05min/landCover/grassland/minf_short_permafrost.map
maxSoilDepthFrac = PCRGLOBWB20/input05min/landCover/grassland/maxf_short.map
rootFraction1    = PCRGLOBWB20/input05min/landCover/grassland/rfrac1_short.map
rootFraction2    = PCRGLOBWB20/input05min/landCover/grassland/rfrac2_short.map	
maxRootDepth     = PCRGLOBWB20/input05min/landCover/grassland/maxrootdepth_short.map	
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

cropCoefficientNC = PCRGLOBWB20/input05min/landCover/grassland/cropCoefficientGrassland.nc
interceptCapNC    = PCRGLOBWB20/input05min/landCover/grassland/interceptCapInputGrassland.nc
coverFractionNC   = PCRGLOBWB20/input05min/landCover/grassland/coverFractionInputGrassland.nc

# initial conditions:
interceptStorIni = {{ initial_conditions_dir }}/interceptStor_grassland.map
snowCoverSWEIni  = {{ initial_conditions_dir }}/snowCoverSWE_grassland.map
snowFreeWaterIni = {{ initial_conditions_dir }}/snowFreeWater_grassland.map
topWaterLayerIni = {{ initial_conditions_dir }}/topWaterLayer_grassland.map
storUpp000005Ini = {{ initial_conditions_dir }}/storUpp000005_grassland.map
storUpp005030Ini = {{ initial_conditions_dir }}/storUpp005030_grassland.map
storLow030150Ini = {{ initial_conditions_dir }}/storLow030150_grassland.map
interflowIni     = {{ initial_conditions_dir }}/interflow_grassland.map

[irrPaddyOptions]

name = irrPaddy
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05
#
landCoverMapsNC  = None
# If NC file is not provided, we have to provide the following values:
fracVegCover     = PCRGLOBWB20/input05min/landCover/irrigation/fractionPaddy.map
minSoilDepthFrac = PCRGLOBWB20/input05min/landCover/irrPaddy/minf_paddy_permafrost.map
maxSoilDepthFrac = PCRGLOBWB20/input05min/landCover/irrPaddy/maxf_paddy.map
rootFraction1    = PCRGLOBWB20/input05min/landCover/irrPaddy/rfrac1_paddy.map
rootFraction2    = PCRGLOBWB20/input05min/landCover/irrPaddy/rfrac2_paddy.map
maxRootDepth     = 0.5
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.
#
# other paramater values
minTopWaterLayer = 0.05
minCropKC        = 0.2
minInterceptCap  = 0.0002
cropDeplFactor   = 0.2

cropCoefficientNC = PCRGLOBWB20/input05min/landCover/irrPaddy/Global_CropCoefficientKc-IrrPaddy_30min.nc

# initial conditions:
interceptStorIni = {{ initial_conditions_dir }}/interceptStor_irrPaddy.map
snowCoverSWEIni  = {{ initial_conditions_dir }}/snowCoverSWE_irrPaddy.map
snowFreeWaterIni = {{ initial_conditions_dir }}/snowFreeWater_irrPaddy.map
topWaterLayerIni = {{ initial_conditions_dir }}/topWaterLayer_irrPaddy.map
storUpp000005Ini = {{ initial_conditions_dir }}/storUpp000005_irrPaddy.map
storUpp005030Ini = {{ initial_conditions_dir }}/storUpp005030_irrPaddy.map
storLow030150Ini = {{ initial_conditions_dir }}/storLow030150_irrPaddy.map
interflowIni     = {{ initial_conditions_dir }}/interflow_irrPaddy.map

[irrNonPaddyOptions]

name = irrNonPaddy
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05
#
landCoverMapsNC  = None
# If NC file is not provided, we have to provide the following values:
fracVegCover     = PCRGLOBWB20/input05min/landCover/irrigation/fractionNonPaddy.map
minSoilDepthFrac = PCRGLOBWB20/input05min/landCover/irrNonPaddy/minf_nonpaddy_permafrost.map
maxSoilDepthFrac = PCRGLOBWB20/input05min/landCover/irrNonPaddy/maxf_nonpaddy.map
rootFraction1    = PCRGLOBWB20/input05min/landCover/irrNonPaddy/rfrac1_nonpaddy.map
rootFraction2    = PCRGLOBWB20/input05min/landCover/irrNonPaddy/rfrac2_nonpaddy.map
maxRootDepth     = 1.0
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.
#
# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002
cropDeplFactor   = 0.5

cropCoefficientNC = PCRGLOBWB20/input05min/landCover/irrNonPaddy/Global_CropCoefficientKc-IrrNonPaddy_30min.nc

# initial conditions:
interceptStorIni = {{ initial_conditions_dir }}/interceptStor_irrNonPaddy.map
snowCoverSWEIni  = {{ initial_conditions_dir }}/snowCoverSWE_irrNonPaddy.map
snowFreeWaterIni = {{ initial_conditions_dir }}/snowFreeWater_irrNonPaddy.map
topWaterLayerIni = {{ initial_conditions_dir }}/topWaterLayer_irrNonPaddy.map
storUpp000005Ini = {{ initial_conditions_dir }}/storUpp000005_irrNonPaddy.map
storUpp005030Ini = {{ initial_conditions_dir }}/storUpp005030_irrNonPaddy.map
storLow030150Ini = {{ initial_conditions_dir }}/storLow030150_irrNonPaddy.map
interflowIni     = {{ initial_conditions_dir }}/interflow_irrNonPaddy.map

[groundwaterOptions]

debugWaterBalance = True

groundwaterPropertiesNC = PCRGLOBWB20/input05min/groundwater/groundwaterProperties.nc

# minimum value for groundwater recession coefficient (day-1)
minRecessionCoeff = 2.5e-4

#~ limitFossilGroundWaterAbstraction = False
limitFossilGroundWaterAbstraction = False
minimumTotalGroundwaterThickness       = 100.
estimateOfTotalGroundwaterThickness    = 100.
estimateOfRenewableGroundwaterCapacity = 0.0

# annual pumping capacity for each region (unit: billion cubic meter per year), should be given in a netcdf file
pumpingCapacityNC = None

# initial conditions:
storGroundwaterIni = {{ initial_conditions_dir }}/storGroundwater_.map
storGroundwaterFossilIni = {{ initial_conditions_dir }}/storGroundwaterFossil_.map
#
avgNonFossilGroundwaterAllocationLongIni  = {{ initial_conditions_dir }}/avgNonFossilGroundwaterAllocationLong_.map
avgNonFossilGroundwaterAllocationShortIni = {{ initial_conditions_dir }}/avgNonFossilGroundwaterAllocationShort_.map
avgTotalGroundwaterAbstractionIni         = {{ initial_conditions_dir }}/avgTotalGroundwaterAbstraction_.map        
avgTotalGroundwaterAllocationLongIni      = {{ initial_conditions_dir }}/avgTotalGroundwaterAllocationLong_.map   
avgTotalGroundwaterAllocationShortIni     = {{ initial_conditions_dir }}/avgTotalGroundwaterAllocationShort_.map   

[routingOptions]

debugWaterBalance = True

lddMap      = PCRGLOBWB20/input05min/routing/lddsound_05min.map
cellAreaMap = PCRGLOBWB20/input05min/routing/cellsize05min.correct.map
gradient    = PCRGLOBWB20/input05min/routing/slope05min.map

# manning coefficient
manningsN   = 0.04

#~ # constant and/or minimum channel width (all are optional)
#~ minimumChannelWidth  = None
#~ constantChannelWidth = None
#~ definedChannelLength = None

# routing method: (options are kinematicWave, simplifiedKinematicWave and accuTravelTime)
routingMethod = accuTravelTime

#~ # Maximum length of a sub time step in seconds (optional and only used if either kinematicWave or simplifiedKinematicWave is used)
#~ # - Note that too long sub time step may create water balance errors.
#~ # - Default values: 3600 seconds for 30 arcmin ; 720 seconds for 5 arcmin
#~ maxiumLengthOfSubTimeStep = 3600.
#~ maxiumLengthOfSubTimeStep = 720.

# dynamic flood plain options
dynamicFloodPlain = False
#
# - the following inputs are needed if dynamicFloodPlain = True
#~ bankfullCapacity  = None
#~ floodplainManningsN = 0.10
#~ relativeElevationFileNC = None # TODO define relative elevation files in a netdf file.
#~ relativeElevationLevels = 0.0,0.01,0.05,0.10,0.20,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00
#
# - smoothing options for pdf in elevation files (optional)
#~ reductionKK = 0.5
#~ criterionKK = 40.0

# lake and reservoir parameters
waterBodyInputNC = PCRGLOBWB20/input05min/routing/reservoirs/waterBodies5ArcMin.nc
onlyNaturalWaterBodies = False

# composite crop factors for WaterBodies: 
cropCoefficientWaterNC = PCRGLOBWB20/input05min/routing/cropCoefficientForOpenWater.nc
minCropWaterKC         = 0.20

# number of days (timesteps) that have been performed for spinning up initial conditions in the routing module (i.e. channelStorageIni, avgDischargeLongIni, avgDischargeShortIni, etc.)
timestepsToAvgDischargeIni     = {{ initial_conditions_dir }}/timestepsToAvgDischarge_.map
# Note that: 
# - maximum number of days (timesteps) to calculate long term average flow values (default: 5 years = 5 * 365 days = 1825)
# - maximum number of days (timesteps) to calculate short term average values (default: 1 month = 1 * 30 days = 30)

# initial conditions:
waterBodyStorageIni            = {{ initial_conditions_dir }}/waterBodyStorage_.map
channelStorageIni              = {{ initial_conditions_dir }}/channelStorage_.map
readAvlChannelStorageIni       = {{ initial_conditions_dir }}/readAvlChannelStorage_.map
avgDischargeLongIni            = {{ initial_conditions_dir }}/avgDischargeLong_.map
avgDischargeShortIni           = {{ initial_conditions_dir }}/avgDischargeShort_.map
m2tDischargeLongIni            = {{ initial_conditions_dir }}/m2tDischargeLong_.map
avgBaseflowLongIni             = {{ initial_conditions_dir }}/avgBaseflowLong_.map
riverbedExchangeIni            = {{ initial_conditions_dir }}/riverbedExchange_.map
avgLakeReservoirInflowShortIni = {{ initial_conditions_dir }}/avgLakeReservoirInflowShort_.map
avgLakeReservoirOutflowLongIni = {{ initial_conditions_dir }}/avgLakeReservoirOutflowLong_.map
#
# initial condition of sub-time step discharge (needed for estimating number of time steps in kinematic wave methods)
#~ subDischargeIni                = None

[reportingOptions]
# output files that will be written in the disk in netcdf files:
outDailyTotNC = discharge,gwRecharge,storUppSurface,storUppTotal,storLowTotal,totalEvaporation,totalRunoff,snowCoverSWE,satDegUppSurface,satDegUpp,satDegLow,storGroundwater,storGroundwaterFossil,totalActiveStorageThickness,totalWaterStorageThickness,gwRecharge
outMonthTotNC = None
outMonthAvgNC = None
outMonthEndNC = None
outAnnuaTotNC = None
outAnnuaAvgNC = None
outAnnuaEndNC = None

